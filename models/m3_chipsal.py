# -*- coding: utf-8 -*-
"""HateSpeech_2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/hatespeech-2-5962ccfa-fa95-439c-aff3-2cc51df48d36.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241106/auto/storage/goog4_request%26X-Goog-Date%3D20241106T170641Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D40face555c0fc1faa66142e80157900cf2e64e6e1dce102a87b6d7c730a256ca23407e52a59ea201d90df69a71282052135a500e86b48dc61b7af705eb7f8f70cd2e4ea86571028a32d3bb2e1096535710af455eed992abb3091097adebbb32c8bbc8c8ed91cdbddd2fdcf65b6a6923d924838a27ea9c435a653b7698eb7d1529f030d2f59fb211337ec86a3fd9c04374ce2c5e71ef5ee2027bbbba9f8b07d2cc22a720fc0b29cb34527c19e7149c69f70dd447f68e8bb25854e5ddf135a13d9c49634926ceb65c0dbd4d76c97b145e3439802f40310276e15a2aa49f4bbf972b1bbebfbbe5ffe26ed9e4def71bf1268e238b877750810269b187d2e570a9185
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

nadspoudel_hs_dataset2_path = kagglehub.dataset_download('nadspoudel/hs-dataset2')
nadspoudel_test_dataset_path = kagglehub.dataset_download('nadspoudel/test-dataset')

print('Data source import complete.')

!pip install -q torch transformers huggingface_hub datasets

from transformers import AutoModelForSequenceClassification, AutoTokenizer,TrainingArguments,Trainer
import torch
from torch.utils.data import Dataset,DataLoader
from sklearn.model_selection import train_test_split
import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import re
from sklearn.preprocessing import LabelEncoder
import numpy as np
from datasets import load_dataset,DatasetDict
import json
import zipfile

tokenizer=AutoTokenizer.from_pretrained('google/muril-base-cased')

model=AutoModelForSequenceClassification.from_pretrained('google/muril-base-cased')

dataset_file_path='/kaggle/input/hs-dataset2/hs_dataset2.csv'

df = pd.read_csv(dataset_file_path)
df

df['label'].value_counts()

# Preprocessing function
def preprocess_text(text):
    # Remove URLs
    text = re.sub(r'http\S+', '', text)
    # Remove hashtags
    text = re.sub(r'#\S+', '', text)
    # Remove mentions
    text = re.sub(r'@\S+', '', text)
    # Remove special characters and digits
    text = re.sub(r'[^a-zA-Z\s\u0900-\u097F]', '', text)
    # Remove extra spaces
    text = re.sub(r'\s+', ' ', text).strip()
    return text

#apply preprocessing
df['tweet'] = df['tweet'].apply(preprocess_text)

df.columns

train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)

# Tokenize the tweets
train_encodings = tokenizer(train_df['tweet'].tolist(), padding=True, truncation=True, max_length=512, return_tensors="pt")
test_encodings = tokenizer(test_df['tweet'].tolist(), padding=True, truncation=True, max_length=512, return_tensors="pt")

# Convert labels to tensors
train_labels = torch.tensor(train_df['label'].values)
test_labels = torch.tensor(test_df['label'].values)

class HateSpeechDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: val[idx] for key, val in self.encodings.items()}
        item['labels'] = self.labels[idx]
        return item

    def __len__(self):
        return len(self.labels)

# Create train and test datasets
train_dataset = HateSpeechDataset(train_encodings, train_labels)
test_dataset = HateSpeechDataset(test_encodings, test_labels)

training_args = TrainingArguments(
    output_dir='/kaggle/working/results',
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=5,
    weight_decay=0.01,
    logging_dir='/kaggle/working/logs',
    logging_steps=10,
    save_safetensors=False  # Disable safetensors saving

)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    tokenizer=tokenizer
)

import os
os.environ["WANDB_DISABLED"] = "true"

trainer.train()

eval_results = trainer.evaluate()
print(f"Evaluation Results: {eval_results}")

# Get predictions and labels using trainer.predict()
pred_output = trainer.predict(test_dataset)

# Extract predictions and labels
predictions = pred_output.predictions.argmax(axis=1)  # Assuming it's a classification task
labels = pred_output.label_ids

# Calculate accuracy and F1 score
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

accuracy = accuracy_score(labels, predictions)
precision, recall, f1, _ = precision_recall_fscore_support(labels, predictions, average='weighted')

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

test_df=pd.read_csv('/kaggle/input/test-dataset/Task-B(indextweet)_label_test.csv')
test_df

test_df['tweet'] = test_df['tweet'].apply(preprocess_text)

# Tokenize the cleaned test tweets
test_encodings = tokenizer(
    test_df['tweet'].tolist(),
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt"
)

class HateSpeechDatasetTestOnly(torch.utils.data.Dataset):
    def __init__(self, encodings):
        self.encodings = encodings

    def __getitem__(self, idx):
        item = {key: val[idx] for key, val in self.encodings.items()}
        return item

    def __len__(self):
        return len(self.encodings.input_ids)

test_dataset = HateSpeechDatasetTestOnly(test_encodings)

# Make predictions on the test set
predictions = trainer.predict(test_dataset)
pred_labels = np.argmax(predictions.predictions, axis=1)

# Create a DataFrame for predictions
submission_df = pd.DataFrame({
    'index': test_df['index'],  # Assuming 'index' column exists in the test data
    'prediction': pred_labels.tolist()
})

# Sort the DataFrame by index to meet submission requirements
submission_df = submission_df.sort_values(by='index').reset_index(drop=True)

json_records = submission_df.apply(lambda row: {"index": int(row['index']), "prediction": int(row['prediction'])}, axis=1)

# Save to a JSON file
json_file_path = '/kaggle/working/submission.json'
with open(json_file_path, 'w') as json_file:
    for record in json_records:
        json_file.write(json.dumps(record) + '\n')

# Zip the JSON file for submission
zip_file_path = '/kaggle/working/res.zip'
with zipfile.ZipFile(zip_file_path, 'w') as zipf:
    zipf.write(json_file_path, arcname='submission.json')

print("Predictions saved to res.zip")